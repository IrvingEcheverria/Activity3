# Activity 3

## FORM ELEMENT
<p1>
This is the first element that we will learn. This element wraps all the other elements that go inside of our form. This is the form element.
Our form won’t submit the data anywhere because it is not connected to a server. To connect our form to a server and process our data,
we can use any server-side language like Python, Ruby, or Javascript using Node. The part of processing the data involves two important attributes 
that are attached to the form element. Let’s take a look at those attributes.
</p1>

<ol>
<li> 1. action: The action attribute is the web address (URL) of a program that processes the information submitted by our form. </li>
<li> 2. method: It is the HTTP method that the browser uses to submit the form, the possible values are POST and GET. </li>
</ol>

<ul>
<li> POST — Data from the body of the form is sent to the server. </li>
<li> GET — Data is sent inside of the URL and parameters are separated with a question mark. </li>
</ul>

<form action="/singup" method="POST">
    <!-- This is a form element -->
</form>

_ _ _

## INPUT ELEMENTS
The input element is the most commonly used form element. It is used to make a text field where the user can type some information for example email, password, etc.
The input element has a lot of options on what it can do, we can change an input behavior using attributes.


TYPE: Indicates what kind of input we want. If we give a value of text to the type attribute then what we mean here is that the value which we are entering into the input field is of type text.
There are many possible values for this particular attribute. Some possible values are email, tel for telephone and password, etc.

ID: This attribute is not mandatory, but it’s a good idea to add one. In some cases, this is helpful for targeting elements with CSS/JavaScript.
The ID attribute is added so that we can associate labels to specific form controls.

NAME: The name attribute is necessary. When a form is submitted to the server-side code, the server can understand the form data and process the values appropriately.

PLACEHOLDER: It is a short hint which is displayed in the input field before the user enters a value. As the user starts typing in the input field the placeholder disappears.


<input type="email" name="username" id="login_username">

_ _ _

## TEXTAREA ELEMENT
Sometimes a single line of text is not enough and a simple input element won’t work. For example, some websites have a contact form for people to type their queries or messages.
In these cases, it’s best to use the textarea element.

This element is not a self-closing tag, so we need to type both the opening and the closing tag.

Attributes:
id: Same as mentioned above in <input/> element.
name: Same as mentioned above in <input/> element.
cols: Specifies the visible width of a text area.
rows: Specifies the visible number of lines in a text area.

<textarea name="feedback" id="contact_feedback" cols="30" rows="10"></textarea>

_ _ _

## BUTTON ELEMENT
The button element is one of the most important form elements. Without a button, you cannot submit any form to the server for processing.
The button element accepts the attribute called type. This attribute accepts three values submit, reset, and button.

Attributes:

type=”reset”: It will clear all the form data when it’s clicked.
type=” button”: It does not have any default behavior and it’s mostly used with JavaScript to program it for custom behavior.
type=” submit”: The default behavior of the submit type is, as the name implies, to submit the form and send all the data over to the server.

<button type="reset">Reset form</button> 

_ _ _ 

## LABEL ELEMENT
Without a Label is impossible for the user to tell which form control does what. There’s no way to know where the user would enter their email, password, feedback comments, etc.
We can label each one of our form controls using the label element.

The most used attribute with a label is for.

Attributes:

for: The for attribute associates the label with a particular form element.
The way it matches is by ID. As you can see in the above example the value of the ID attribute given to the input element is email.
The value of the for attribute given to the label element is also email, so both of them are associated with each other.

<label for="login_username">Email</label>
<input type="email" name="Username" id="login_username">

_ _ _

## SELECT ELEMENT

Sometimes, when you’re creating a form, you don’t want the user to be able to type in the text. Rather, you might want them to pick from some preset options that you provide.

Anytime you have a list of options that’s longer than, say, four or five things, it’s best to go with the select menu because it saves space.

The select menu element is made using the opening and closing <select> tag.

<select> — The select element renders a drop-down menu that contains selectable options. This element won’t do anything by itself. This form element actually needs additional elements inside of it, The elements we put inside of the select element are called option elements.

Attributes:

name: Same as mentioned above in <input/> element.
Option element

The option element represents one of the choices that a user can choose in a select menu. This element uses an attribute called value.

Attributes:

value: When you submit a form to a server-side resource, each form element has an associated value for text inputs and text areas. That value is whatever the user types into the field. However, since we’re creating these predefined options, we need to specify what the value should look like when it’s submitted. So, we use the value attribute to specify the values to predefined options.
    
<select name="favorite_food" id="survey_fav_food">
    <option value="apple">Apple pie</option>
    <option value="pineapple">Pineapple pie</option>
    <option value="pizza">Pizza</option>
    <option value="tacos">Tacos</option>
    <option value="chicken">Chicken sandwich</option>
    <option value="pozole">Pozole</option>
</select>
    
_ _ _
    
## RADIO ELEMENT
Select elements are great if you have lots of options. If you have something like 5 or fewer options, it’s better to use radio buttons.

The difference between them is that radio buttons show you all the options at once. Like the select element, the user can only pick from one of them.

Attributes:

name: Same as mentioned above in <input/> element.
value: Since we’re creating these predefined options, we need to specify what the value should look like when it’s submitted. So, we use the value attribute to specify the values to predefined options.
    
<input type="radio" id="contactChoice1" name="contact" value="email">
<label for="contactChoice1">Email</label>
    
<input type="radio" id="contactChoice2" name="contact" value="phone">
<label for="contactChoice2">Phone</label>

<input type="radio" id="contactChoice3" name="contact" value="mail">
<label for="contactChoice3">Mail</label>
    
_ _ _    
    
## CHECKBOX ELEMENTS
Sometimes you might have a group of predefined options. You want the user to be able to select multiple options and not just one of them. That’s where checkboxes are useful.

Attributes:

name: Same as mentioned above in <input/> element.
value: Since we’re creating these predefined options, we need to specify what the value should look like when it’s submitted. So, we use the value attribute to specify the values to predefined options.
checked: By default, a checkbox input is unchecked. You can set the default state to checked by using the attribute called checked. Remember this is a boolean attribute.
    
<input type="checkbox" id="scales" name="scales" checked>
<label for="scales">Example</label>
    
_ _ _     
    
## Difference between Checkbox and Radio button
A checkbox can exist on its own, while radio buttons can only appear as a group (a minimum of 2 radio buttons should be there).
Selecting the checkbox is optional but choosing one of the radio buttons is mandatory.
Don’t worry about memorizing everything. Almost no professional web developer can name every attribute or element. What’s more important than memorization is learning how to look up things in the documentation when you need them.

You can try adding your own CSS if you finished this activity quickly to make this form look the way you want it to look. 
